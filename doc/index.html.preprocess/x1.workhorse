NEPOMUK Logo KDE Logo
Task Model Ontology (TMO)
OSCAF Recommendation 13.06.2012
Task-Force Ontologies
Latest Version:
    http://www.semanticdesktop.org/ontologies/tmo
This Version:
    This file refers to the Revision 1.1 of TMO.
Minor changes may be
    implemented in future revisions.
With each new revision, the documentation
    and all serializations of the ontology will be updated.
The URI identifying
    this version (but not the namespace) is http://www.semanticdesktop.org/
    ontologies/2008/05/20/tmo/v1.1/
Previous Version:
    http://www.semanticdesktop.org/ontologies/2008/05/20/tmo/v1.0/
Authors:
    Marko Brunzel, DFKI, marko.brunzel@dfki.de
    Olaf Grebner, SAP, olaf.grebner@sap.com
Editors:
    Marko Brunzel, DFKI, marko.brunzel@dfki.de
    Olaf Grebner, SAP, olaf.grebner@sap.com
Contributors:
    Leo Sauermann, DFKI, leo.sauermann@dfki.de
    Michael Sintek, DFKI, michael.sintek@dfki.de
    Ludger van Elst, DFKI, elst@dfki.de
    Ansgar Bernardi, DFKI, ansgar.bernardi@dfki.de
    Uwe Riss, SAP, uwe.riss@sap.com
Ontology:
    XML/RDFS Serialization: TMO (Data Graph Only)
    XML/RDFS Serialization: TMO (Metadata Graph Only)
    TriG Serialization: TMO (Graph Set)
Copyright © 2012 OSCAF^® The ontologies are made available under the terms of
OSCAF software license
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Abstract
The TMO Ontology can be used to describe personal tasks of individuals, also
known as to-do lists.
It is based on RDF and NRL, the NEPOMUK Representational
Language and other Semantic Web ontologies.
This document describes the
fundamental elements of the language and how to use them.
Status of this document
This section describes the status of this document at the time of its
publication.
The form used for this status message and document is inspired by
the W3C process.
This document is an Editors Draft produced by Olaf Grebner and Marko Brunzel as
part of the work package task management in the NEPOMUK project.
The task-force
intends this document to become a NEPOMUK standard.
The editors of this
document value feedback from the public and from NEPOMUK members.
Please add
comments as tickets in the NEPOMUK tracker using the category ontology-tmo.
This document is accompanied by a RDFS/NRL ontology, which should be read in
parallel to learn more about TMO.
This document and the TMO ontology as such are a continuation and improvement
of existing work.
Other documents may supersede this document.
Parts of this
document will be published in other documents, such as scientific publications.
This document is based on various other publications by the authors, and is a
continuation of existing work.
Some formulations from the RDFS primer and SKOS
primer documents were reused.
Ontology Visualisation
[tmo]
Change Log
• Added
      □ tmo:dependencyType
      □ tmo:involvedPersons
  • Modified
      □ tmo:dateTime
      □ tmo:dependencyDescription
      □ tmo:indexPosition
      □ tmo:progress
      □ tmo:actualCompletion
      □ tmo:targetCompletion
      □ tmo:taskDescription
      □ tmo:taskReference
  • Deprecated
      □ tmo:actualTimeUsage
      □ tmo:personInvolvement
      □ tmo:targetTimeUsage
      □ tmo:taskEffort
      □ tmo:taskEffortAccuracy
      □ tmo:taskEffortDuration
      □ tmo:taskEffortEndDate
      □ tmo:taskEffortStartDate
      □ tmo:taskEffortType
      □ tmo:timeUsage
1.
Introduction
The Task Management Model Ontology (TMO) is a conceptual representation of
    tasks for use in personal task management applications for knowledge
    workers.
Knowledge workers perform knowledge work.
For example, managers,
    researchers and sales representatives are knowledge workers.
Knowledge work
    is goal driven, i.e., a knowledge worker strives to achieve a goal with the
    execution of her work.
Knowledge work can be broken down into tasks where
    each task has a goal that the knowledge worker needs to achieve in order to
    complete the task.
Knowledge workers can reach their goals using different
    approaches and methods which can differ individually from knowledge worker
    to knowledge worker.
Knowledge is thus rather characterized by variety than
    by routine.
Tasks are units of work.
We address a kind of tasks which often arise
    during performing the work, compared to task which are apriory given.
Or in
    other words, the modelling of tasks is also done during task execution.
Workflows are usually not enforced upon those tasks.
Such tasks can form
    flexible workflows where recommendations regarding the execution of
    particular tasks are made.
In the NEPOMUK environment, information chunks are expressed by the NAO,
    NIE and PIMO ontologies.
In principle, every piece of information can have
    the character of a task.
Personal Task Management (PTM) helps knowledge workers to manage their
    personal, scarce work capacity to achieve their given goals in the desired
    quality.
PTM focuses a personal process perspective, i.e., to manage the
    activities the knowledge worker performs to get the work done.
Tackling
    information and task overload, the knowledge worker can manage the task
    workload so that the tasks can be executed on time, scope and budget.
A
    core part of task management is thus enabling prioritization decisions that
    allow the knowledge worker to decide on what tasks to execute when, to what
    extent and to what cost.
PTM applications support knowledge workers in performing efficient task
    management to achieve their goals in the best possible way.
PTM
    applications offer functionality to help the knowledge worker to manage the
    whole set of tasks that the knowledge worker has to accomplish.
This
    happens in the form of a task list, as well known as to-do lists.
Task
    lists here use lists of explicit task representations, i.e., for each task
    in the list, a dedicated task representation exists and contains the task
    information needed for the knowledge worker to identify, use and prioritize
    the task.
Bringing together PTM and PIM, the TMO is an ontology that enables the
    knowledge worker to organize lists of tasks in conjunction with organizing
    information needed to execute these tasks.
Foremost, the TMO captures the
    knowledge worker's tasks and applications using it enable the knowledge
    worker to get on overview on what needs to be done and how the knowledge
    worker can prioritize this.
In addition, the TMO supports applications to
    manage the information that is needed from a knowledge worker's perspective
    to fulfil the task.
This includes for example information on who else is
    involved in the task and what category the task belongs to.
Further information on the TMO going beyond this document can be found at
    [TASKMODEL].
This includes background information on task management, state
    of the art in task modelling, modelling considerations in the personal task
    space and explains modelling decisions taken for the TMO.
2.
Scope and Covered Use Cases
The TMO is designed for use as part the of PIM platform Nepomuk.
The
    respective Nepomuk Ontology framework provides ontologies for conducting
    personal information management in particular on the desktop, see [PIMO],
    [NIE].
The TMO is an extension of the PIMO ontology focusing on tasks and
    the support of PTM applications.
However, applications can use the TMO as
    well without accessing this Nepomuk ontology framework to support personal
    task management.
Using Nepomuk, the knowledge worker and application
    developer gain the support for desktop integration, i.e., the integration
    with information models that represent the entities of a desktop, like e.g.
    emails and files.
The TMO covers with its task model a number of task management use cases
    that can be implemented in task management applications.
The TMO provides
    the conceptual basis for these use cases.
These use cases are:
      □ Personal Task Management - Personal Task Management consists of several
        parts.
☆ Basic task handling - Basic task handling deals with organizing a
            knowledge workers task, e.g., creating and populating a task.
☆ Task list management - Task list management deals with the
            knowledge worker handling a personal to-do list where the Knowledge
            worker manages a list of personal tasks that are due for execution
            or are already executed.
☆ Task priority management - Task priority management helps the
            knowledge worker to maintain the priorities coming with a task.
☆ Task time management - Task time management focuses on the time
            needed to execute a task and the knowledge worker can assign a task
            due date to manage the time-related aspects of work.
☆ Task planning - Task planning helps the knowledge worker to
            structure the workload and perform work decomposition, i.e.,
            breaking down and categorizing tasks.
□ Task Information Management - Task Information Management helps the
        knowledge worker to collect and associate information needed for
        executing a task.
This includes task tags to group tasks, information
        object attachments to connect tasks to, e.g., emails and files, and as
        social aspect persons involved in a task.
□ Social Task Management - Social Task Management focuses on
        collaboration in the task domain.
This means, that knowledge workers
        can delegate tasks to each other, can perform and task tracking and
        conduct information sharing.
In addition, knowledge workers and application developers can extend the
    TMO to cover further use cases.
These TMO extensions (TMOE) can for example
    support experience and knowledge management for tasks with task patterns
    [TASKMODEL].
3.
TMO Modelling
The core class of the TMO is the class tmo:Task.
The tmo:Task is a subclass
    of pimo:ProcessConcept.
The inheritance hierarchy of the tmo:Task is shown
    in the figure below.
tmo class and ist super-classes tmo class and ist super-classes
Details of a task are represented by attributes modelled as shown in the
    figure below.
Tasks can be grouped by means of the tmo:TaskCollection
    class.
overview on tmo
    overview on tmo
    overview on tmo
There are some classes that have been modelled according to a role based
    modelling approach.
Hereby it is possible to model n-ary relations.
In
    particular attachments, the involvement of persons and of actors and
    resource (furthermore referred as AbilityCarriers) and task dependencies
    have been modelled this way.
The overviews on those four circumstances are
    shown in the figures below:
tmo:PersonInvolvement
Role based modelling of tmo:PersonInvolvement
    Role based modelling of tmo:Attachment
tmo:AbilityCarrierInvolvement
Role based modelling of tmo:AbilityCarrierInvolvement
tmo:Attachment
Role based modelling of tmo:Attachment
tmo: TaskDependency
Role based modelling of tmo:TaskDependency
The transmission of tasks is represented by the tmo:TaskTransmission class.
tmo:TaskTransmission
References
[PIMO]
        Personal Information Model ontology (PIMO) , Leo Sauermann, Ludger van
        Elst, Knud Möller, http://www.semanticdesktop.org/ontologies/pimo
    [NIE]
        NEPOMUK Information Element Ontology (NIE) , Antoni Mylka, Leo
        Sauermann, Michael Sintek, Ludger van Elst, http://
        www.semanticdesktop.org/ontologies/nie
    [TASKMODEL]
        Task Management Model (TMO) , Olaf Grebner, Ernie Ong, Uwe Riss, Marko
        Brunzel, Ansgar Bernardi, Thomas Roth-Berghofer, http://
        nepomuk.semanticdesktop.org/xwiki/bin/download/Main1/D3-1/
        D3.1_v10_NEPOMUK_Task_Management_Model.pdf
Ontology Classes Description
AbilityCarrier
Superclasses rdfs:Resource
    Subclasses   tmo:AgentAbilityCarrier, tmo:Role, tmo:Skill
    In domain    --
    of:
    In range of: tmo:abilityCarrier
                 AbilityCarrier is an abstract class which circumferences all
                 entities which can take action or which are somehow involved
                 in tasks.
This is in other task conceptualizations rather
                 named "actor".
But here it is named AbilityCarrier because it
                 is not neccessarily "active".
The execution of a task relies
                 on certain abilities.
The abstract concept of Abilitiy\
                 _Carriers circumference all those more concrete concepts of
                 which one can think of while working on tasks.
Using this
    Description  abstract class enables to substitute such Ability Carrier's in
                 the process of generating patterns from task instances and
                 vice versa in the process of instantiating task instances from
                 patterns without violating the schema.
With this attribute, a
                 series of ability carrying entities (Person, Role, Skill,
                 OrganizationalUnit, InformalDescribedAbility) and the role of
                 involvement (required, request, used) is enabled.
The role
                 hereby allows specifying how the ability carrying entity is or
                 was involved.
AbilityCarrierInvolvement
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource
    Subclasses   --
    In domain    tmo:abilityCarrier, tmo:abilityCarrierRole,
    of:          tmo:abilityCarrierTask
    In range of: tmo:abilityCarrierInvolvement
                 The class AbilityCarrier\_Involvement ties together an
    Description  AbilityCarrier with an AbilityCarrier\_Role.
This is a role
                 based modelling approach.
An n-ary relation is realized.
AbilityCarrierRole
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:abilityCarrierRole
                 Examples instances of AbilityCarrirRoles are e.g. "requested",
    Description  "required" and "used" which further specify the type a person
                 was involved in.
Instances    tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_...
AgentAbilityCarrier
Superclasses  tmo:AbilityCarrier, rdfs:Resource
    Subclasses    --
    In domain of: --
    In range of:  --
    Description
AssociationDependency
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency, tmo:UndirectedDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
    Description
Attachment
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource
    Subclasses   --
    In domain    tmo:attachmentReference, tmo:attachmentRole,
    of:          tmo:attachmentTask, tmo:createdBy
    In range of: tmo:attachment
                 By means of attachments, references to other resources can be
                 established.
Resources are information objects.
Every Thing,
                 which can be referenced, on the SSD is an information object.
In contrast to the usual SSD references/associations, here
                 additionally information can be specified.
Further metadata
    Description  about the role an attachment plays can be stated by means of
                 instances of AttachmentRole.
It can be expressed what the Role
                 of attachment is e.g., regarding "desired/requested" or
                 "required" or "potentially useful / somehow related" or "used/
                 produced/achieved".
The reference property models the actual
                 link to the attached piece of information.
AttachmentRole
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:attachmentRole
                 AttachmentRoles further specify the type of how an attachment
    Description  relates to a task.
Example instances of AttachmentRoles are
                 e.g. "desired\_request", "required" and "used".
Instances    tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_AttachmentRole\_Used
Delegability
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:delegability
    Description
                 tmo:TMO\_Instance\_Delegability\_High, tmo:TMO\_Instance\
    Instances    _Delegability\_Low, tmo:TMO\_Instance\_Delegability\_Medium,
                 tmo:TMO\_Instance\_Delegability\_Never, tmo:TMO\_Instance\_...
Importance
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:importance
    Description
                 tmo:TMO\_Instance\_Importance\_01, tmo:TMO\_Instance\
                 _Importance\_02, tmo:TMO\_Instance\_Importance\_03, tmo:TMO\
    Instances    _Instance\_Importance\_04, tmo:TMO\_Instance\_Importance\_05,
                 tmo:TMO\_Instance\_Importance\_06, tmo:TMO\_Instance\
                 _Importance\_07, tmo:TMO\_Instance\_Importance\_08, tmo:TMO\
                 _Instance\_Importance\_09, tmo:TMO\_Instance\_Importance\_10
Interdependence
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency, tmo:UndirectedDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
    Description
PersonInvolvement
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource
    Subclasses   --
    In domain    tmo:involvedPerson, tmo:involvedPersonRole,
    of:          tmo:involvedPersonTask
    In range of: tmo:involvedPersons
                 PersonInvolvement realizes n-ary associations to Persons which
    Description  are realtedd to an task.
The involvement is further
                 characterized by an PersonTaskRole.
PersonInvolvementRole
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:involvedPersonRole
    Description  They further specify the type a person was related to an task.
Examples instances of AttachmentRoles are e.g.
                 tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
    Instances    _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_...
PredecessorDependency
pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
    Superclasses tmo:PredecessorSuccessorDependency, rdfs:Resource,
                 tmo:TaskDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
    Description  In a PredecessorDependency the dependencyMemberA is the task
                 which is to be executed before dependencyMemberB.
PredecessorSuccessorDependency
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency
    Subclasses   tmo:PredecessorDependency, tmo:SuccessorDependency
    In domain    --
    of:
    In range of: --
                 The PredecessorSuccessorDependency enables a directed relation
    Description  between task.
By means of the concrete sublcasses one can
                 further distinguish from which point of view this relation is
                 created.
Priority
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:priority
    Description
    Instances    tmo:TMO\_Instance\_Priority\_High, tmo:TMO\_Instance\_Priority
                 \_Low, tmo:TMO\_Instance\_Priority\_Medium
Role
Superclasses  tmo:AbilityCarrier, rdfs:Resource
    Subclasses    --
    In domain of: --
    In range of:  --
    Description   examples: Architect, Developer, ...
SimilarityDependence
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency, tmo:UndirectedDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
    Description
Skill
Superclasses  tmo:AbilityCarrier, rdfs:Resource
    Subclasses    --
    In domain of: --
    In range of:  --
    Description   examples are e.g. technologies like Java, XML, ...
StateTypeRole
Superclasses rdfs:Resource
                 tmo:AbilityCarrierRole, tmo:AttachmentRole, tmo:Delegability,
    Subclasses   tmo:Importance, tmo:PersonInvolvementRole, tmo:Priority,
                 tmo:TaskPrivacyState, tmo:TaskState, tmo:TransmissionState,
                 tmo:TransmissionType, tmo:Urgency
    In domain    --
    of:
    In range of: --
                 StateTypeRole is an abstract class which subsumes various
    Description  other classes which represent "states" or roles e.g. in role
                 based modelling conpetualisations.
tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _AttachmentRole\_Used, tmo:TMO\_Instance\_Delegability\_High,
                 tmo:TMO\_Instance\_Delegability\_Low, tmo:TMO\_Instance\
                 _Delegability\_Medium, tmo:TMO\_Instance\_Delegability\_Never,
                 tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_Importance\_01,
                 tmo:TMO\_Instance\_Importance\_02, tmo:TMO\_Instance\
                 _Importance\_03, tmo:TMO\_Instance\_Importance\_04, tmo:TMO\
                 _Instance\_Importance\_05, tmo:TMO\_Instance\_Importance\_06,
                 tmo:TMO\_Instance\_Importance\_07, tmo:TMO\_Instance\
                 _Importance\_08, tmo:TMO\_Instance\_Importance\_09, tmo:TMO\
                 _Instance\_Importance\_10, tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
    Instances    _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_Priority\_High, tmo:TMO\
                 _Instance\_Priority\_Low, tmo:TMO\_Instance\_Priority\_Medium,
                 tmo:TMO\_Instance\_TaskPrivacy\_Private, tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_TaskState\_Archived, tmo:TMO\
                 _Instance\_TaskState\_Completed, tmo:TMO\_Instance\_TaskState\
                 _Deleted, tmo:TMO\_Instance\_TaskState\_Finalized, tmo:TMO\
                 _Instance\_TaskState\_New, tmo:TMO\_Instance\_TaskState\
                 _Running, tmo:TMO\_Instance\_TaskState\_Suspended, tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_Urgency\_01, tmo:TMO\_Instance\_Urgency\_02,
                 tmo:TMO\_Instance\_Urgency\_03, tmo:TMO\_Instance\_Urgency\
                 _04, tmo:TMO\_Instance\_Urgency\_05, tmo:TMO\_Instance\
                 _Urgency\_06, tmo:TMO\_Instance\_Urgency\_07, tmo:TMO\
                 _Instance\_Urgency\_08, tmo:TMO\_Instance\_Urgency\_09,
                 tmo:TMO\_Instance\_Urgency\_10
SuccessorDependency
pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
    Superclasses tmo:PredecessorSuccessorDependency, rdfs:Resource,
                 tmo:TaskDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
    Description  In a SuccessorrDependency the dependencyMemberA is the task
                 which is to be executed after dependencyMemberB.
SuperSubTaskDependency
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency
    Subclasses   --
    In domain    --
    of:
    In range of: --
                 By means of the SuperSubTaskDependency one can further
    Description  describe the subtask-supertask relation .e.g by an descriptin.
This enables an n-ary relation between subtask and supertask.
Task
Superclasses pimo:ClassOrThing, pimo:ClassOrThingOrPropertyOrAssociation,
                 pimo:ProcessConcept, rdfs:Resource, pimo:Task, pimo:Thing
    Subclasses   --
                 tmo:abilityCarrierInvolvement, tmo:actualCompletion,
                 tmo:actualEndTime, tmo:actualStartTime, tmo:attachment,
                 tmo:contextThread, tmo:delegability, tmo:dependency,
                 tmo:dueDate, tmo:importance, tmo:indexPosition,
    In domain    tmo:involvedPersons, tmo:lastReviewDate, tmo:logEntry,
    of:          tmo:nextReviewIntervall, tmo:priority, tmo:subTask,
                 tmo:subTaskOrdering, tmo:superTask, tmo:targetCompletion,
                 tmo:targetEndTime, tmo:targetStartTime, tmo:taskDescription,
                 tmo:taskGoal, tmo:taskId, tmo:taskName, tmo:taskPrivacyState,
                 tmo:taskReference, tmo:taskSource, tmo:taskState,
                 tmo:taskTransmission, tmo:urgency
                 tmo:abilityCarrierTask, tmo:attachmentTask, tmo:containsTask,
    In range of: tmo:contextTask, tmo:dependencyMemberA, tmo:dependencyMemberB,
                 tmo:involvedPersonTask, tmo:subTask, tmo:superTask,
                 tmo:taskReference, tmo:transmissionTask
                 The tmo:task is the central entitiey of the tmo.
Task can
                 range from vague things to be possibly done in e distant
    Description  future to concrete things to be done in a precise forseeable
                 manner.
It is not unrealisitc to assume that knowledge worker
                 have hundred or more tasks a day.
TaskContainer
Superclasses pimo:ClassOrThing, pimo:ClassOrThingOrPropertyOrAssociation,
                 pimo:Collection, rdfs:Resource, pimo:Thing
    Subclasses   --
    In domain    tmo:containsTask
    of:
    In range of: --
    Description
                 tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
    Instances    _Instance\_TaskContainer\_inbox, tmo:TMO\_Instance\_...,
                 tmo:TMO\_Instance\_...
TaskDependency
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource
                 tmo:AssociationDependency, tmo:Interdependence,
    Subclasses   tmo:PredecessorDependency, tmo:PredecessorSuccessorDependency,
                 tmo:SimilarityDependence, tmo:SuccessorDependency,
                 tmo:SuperSubTaskDependency, tmo:UndirectedDependency
    In domain    tmo:dependencyDescription, tmo:dependencyMemberA,
    of:          tmo:dependencyMemberB, tmo:dependencyOrderNumber
    In range of: tmo:dependency
                 Between the tasks, further dependencies may exist.
These
                 dependencies allow for a graph network structure.
For ease of
                 use, dependencies should not be too frequent, otherwise the
                 primarily character of a hierarchy would be diminished and a
                 consequent graph representation would become considerable.
Description  However, such a graph representation has other drawbacks, the
                 user is likely to loose oversight, tree structures are more
                 helpful in structuring the work.
A dependency relation is
                 characterized by the type of the relation and by an additional
                 description.
There are different possibilities for dependency
                 relations between tasks.
TaskPrivacyState
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:taskPrivacyState
                 Privacy Status serves for the separation between a
                 professional and a private purpose of a task.
This attribute
                 provides with the values "professional/private" a high-level
    Description  separation of privacy in terms of setting distribution and
                 access rights to other users for the task.
This separation may
                 arise as a general Nepomuk issue and may therefore be handled
                 in conjunction with a privacy preserving SSD architecture.
Instances    tmo:TMO\_Instance\_TaskPrivacy\_Private, tmo:TMO\_Instance\
                 _...
TaskState
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    tmo:taskStateChangesFrom, tmo:taskStateChangesTo
    of:
    In range of: tmo:taskState, tmo:taskStateChangesFrom,
                 tmo:taskStateChangesTo
                 The task state property allows tracking a task during its
                 lifecycle.
Initially the state is just "created".
The
                 TaskState class was modeled so that for each state can be set
                 which the typical prior and posterior states are.
This has the
    Description  advantage that e.g. a UI can retrieve the allowed states at
                 runtime from the ontology; rather can having this potentially
                 changing knowledge hard coded.
But the prior and posterior
                 states are only defaults; the human user is always free to
                 change the state.
tmo:TMO\_Instance\_TaskState\_Archived, tmo:TMO\_Instance\
                 _TaskState\_Completed, tmo:TMO\_Instance\_TaskState\_Deleted,
    Instances    tmo:TMO\_Instance\_TaskState\_Finalized, tmo:TMO\_Instance\
                 _TaskState\_New, tmo:TMO\_Instance\_TaskState\_Running,
                 tmo:TMO\_Instance\_TaskState\_Suspended, tmo:TMO\_Instance\
                 _...
TaskTransmission
Superclasses rdfs:Resource
    Subclasses   --
    In domain    tmo:receiveDateTime, tmo:sendDateTime, tmo:transmissionFrom,
    of:          tmo:transmissionState, tmo:transmissionTask,
                 tmo:transmissionTo, tmo:transmissionType
    In range of: tmo:taskTransmission
                 On the SSD, tasks are not restricted to one person and may
                 cross from the PTM of one person to the PTM of another.
With
                 transmission, we refer to the process of sending a task from
                 one person (sender) to one or more other persons (receiver(s))
                 (see Section 5.2.1.3 Task Transmission).
Task delegation and
                 task transfer are two special kinds of task transmission which
                 are described at the end of this section.
In addition, the
                 collaborative task is realized by task transmission.
For the
                 process of sending a task, some information is required.
This
                 information is also modelled in the task ontology.
This
                 information is still useful after the process of sending a
                 task was completed.
Task Delegation is a process where the
                 sender of the task restricts the access rights of the
    Description  receiver.
This includes the right to distribute further this
                 task and additionally the obligation to give feedback to the
                 sender.
The person that receives a task by delegation usually
                 has not the full control about the task.
The attributes
                 described in the following section have the purpose to enable
                 such "access rights".
The receiver will also probably have
                 obligations regarding what to report to whom at which time.
In
                 contrast, the simplest case is that all rights are granted to
                 the receiver and there is no feedback desired by the sender.
What to do with the task may be apparent by the organization
                 context, or it may be left to the receiver.
This is like
                 sending an email but with the advantage that the information
                 is transferred in the "task space" of the participating
                 persons.
TransmissionState
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    tmo:transmissionStateChangesFrom,
    of:          tmo:transmissionStateChangesTo
    In range of: tmo:transmissionState, tmo:transmissionStateChangesFrom,
                 tmo:transmissionStateChangesTo
    Description  States a task can go through during transmission of an task.
tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
    Instances    _Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\_Instance\
                 _..., tmo:TMO\_Instance\_...
TransmissionType
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:transmissionType
                 By means of the TransmissionType one can distinguish several
                 different types which might imply a different business logic.
Description  e.g. delegation can mean that the results of the task
                 fulfillment care to be reported back to the sender of the
                 task.
Instances    tmo:TMO\_Instance\_..., tmo:TMO\_Instance\_..., tmo:TMO\
                 _Instance\_...
UndirectedDependency
Superclasses pimo:Association, pimo:ClassOrThingOrPropertyOrAssociation,
                 rdfs:Resource, tmo:TaskDependency
    Subclasses   tmo:AssociationDependency, tmo:Interdependence,
                 tmo:SimilarityDependence
    In domain    --
    of:
    In range of: --
    Description  A symmetric relations between task.
Urgency
Superclasses rdfs:Resource, tmo:StateTypeRole
    Subclasses   --
    In domain    --
    of:
    In range of: tmo:urgency
    Description
                 tmo:TMO\_Instance\_Urgency\_01, tmo:TMO\_Instance\_Urgency\
                 _02, tmo:TMO\_Instance\_Urgency\_03, tmo:TMO\_Instance\
    Instances    _Urgency\_04, tmo:TMO\_Instance\_Urgency\_05, tmo:TMO\
                 _Instance\_Urgency\_06, tmo:TMO\_Instance\_Urgency\_07,
                 tmo:TMO\_Instance\_Urgency\_08, tmo:TMO\_Instance\_Urgency\
                 _09, tmo:TMO\_Instance\_Urgency\_10
Ontology Properties Description
abilityCarrier
Type                rdf:Property, rdfs:Resource
    Domain              tmo:AbilityCarrierInvolvement
    Range               tmo:AbilityCarrier
    Minimal cardinality 1
    Maximal cardinality 1
    Superproperties     pimo:associationMember
    Subproperties       --
    Description
abilityCarrierInvolvement
Type             rdf:Property, rdfs:Resource
    Domain           tmo:Task
    Range            tmo:AbilityCarrierInvolvement
    Inverse property tmo:abilityCarrierTask
    Superproperties  --
    Subproperties    --
    Description
abilityCarrierRole
Type                rdf:Property, rdfs:Resource
    Domain              tmo:AbilityCarrierInvolvement
    Range               tmo:AbilityCarrierRole
    Minimal cardinality 1
    Maximal cardinality 1
    Superproperties     tmo:stateTypeRole
    Subproperties       --
    Description
abilityCarrierTask
Type                rdf:Property, rdfs:Resource
    Domain              tmo:AbilityCarrierInvolvement
    Range               tmo:Task
    Inverse property    tmo:abilityCarrierInvolvement
    Maximal cardinality 1
    Superproperties     pimo:associationMember
    Subproperties       --
    Description
actualCompletion
Type                rdf:Property, rdfs:Resource
    Domain              tmo:Task
    Range               rdfs:Literal
    Maximal cardinality 1
    Superproperties     tmo:progress
    Subproperties       --
    Description
actualEndTime
Type                rdf:Property, rdfs:Resource
    Domain              tmo:Task
    Range               xsd:dateTime
    Maximal cardinality 1
    Superproperties     tmo:actualTime, tmo:dateTime, tmo:endTime
    Subproperties       --
    Description
actualStartTime
Type                rdf:Property, rdfs:Resource
    Domain              tmo:Task
    Range               xsd:dateTime
    Maximal cardinality 1
    Superproperties     tmo:actualTime, tmo:dateTime, tmo:startTime
    Subproperties       --
    Description
actualTime
Type                rdf:Property, rdfs:Resource
    Domain              --
    Range               xsd:dateTime
    Maximal cardinality 1
    Superproperties     tmo:dateTime
    Subproperties       tmo:actualEndTime, tmo:actualStartTime
    Description
attachment
Type            rdf:Property, rdfs:Resource
    Domain          tmo:Task
    Range           tmo:Attachment
    Inverse         tmo:attachmentTask
    property
    Superproperties --
    Subproperties   --
    Description     connects a Task with an Attachment object.
Attachments are
                    associations of Things.
attachmentReference
Type                rdf:Property, rdfs:Resource
    Domain              tmo:Attachment
    Range               rdfs:Resource
    Minimal cardinality 1
    Maximal cardinality 1
    Superproperties     pimo:associationMember
    Subproperties       --
    Description
attachmentRole
Type                rdf:Property, rdfs:Resource
    Domain              tmo:Attachment
    Range               tmo:AttachmentRole
    Maximal cardinality 1
    Superproperties     tmo:stateTypeRole
    Subproperties       --
    Description
attachmentTask